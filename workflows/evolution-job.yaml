# Evolution Job Workflow
# Orchestrates the evolution algorithm through variator, enricher, and ranker phases

main:
  params: [jobData]
  steps:
    - init:
        assign:
          - jobId: ${jobData.jobId}
          - evolutionConfig: ${jobData.evolutionConfig}
          - problemContext: ${jobData.problemContext}
          - userId: ${jobData.userId}
          - sessionId: ${jobData.sessionId}
          - workerUrl: ${sys.get_env("WORKER_URL")}
          - totalGenerations: ${evolutionConfig.generations}
          - currentGeneration: 1
          - topPerformers: []

    - updateJobStatus:
        call: http.post
        args:
          url: ${workerUrl + "/update-job-status"}
          body:
            jobId: ${jobId}
            status: "processing"
          headers:
            Content-Type: "application/json"

    - processGenerations:
        for:
          value: generation
          in: ${[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]}
          steps:
            - checkGeneration:
                switch:
                  - condition: ${generation <= totalGenerations}
                    steps:
                  - logGeneration:
                      call: sys.log
                      args:
                        text: '${"Processing generation " + string(generation) + " of " + string(totalGenerations)}'
                        severity: "INFO"

                  # Variator Phase
                  - callVariator:
                      try:
                        call: http.post
                        args:
                          url: ${workerUrl + "/process-variator"}
                          body:
                            jobId: ${jobId}
                            generation: ${generation}
                            evolutionConfig: ${evolutionConfig}
                            problemContext: ${problemContext}
                            topPerformers: ${topPerformers}
                          auth:
                            type: OIDC
                          timeout: 300
                        result: variatorResult
                      except:
                        as: e
                        steps:
                          - logVariatorError:
                              call: sys.log
                              args:
                                text: '${"Variator error for job " + jobId + ", generation " + string(generation) + ": " + json.encode(e)}'
                                severity: "ERROR"
                          - failJob:
                              call: http.post
                              args:
                                url: ${workerUrl + "/update-job-status"}
                                body:
                                  jobId: ${jobId}
                                  status: "failed"
                                  error: '${"Variator failed: " + e.message}'
                              auth:
                                type: OIDC
                          - raiseError:
                              raise: ${e}

                  # Enricher Phase
                  - callEnricher:
                      try:
                        call: http.post
                        args:
                          url: ${workerUrl + "/process-enricher"}
                          body:
                            jobId: ${jobId}
                            generation: ${generation}
                            evolutionConfig: ${evolutionConfig}
                            ideas: ${variatorResult.body.ideas}
                          auth:
                            type: OIDC
                          timeout: 300
                        result: enricherResult
                      except:
                        as: e
                        steps:
                          - logEnricherError:
                              call: sys.log
                              args:
                                text: '${"Enricher error for job " + jobId + ", generation " + string(generation) + ": " + json.encode(e)}'
                                severity: "ERROR"
                          - failJob2:
                              call: http.post
                              args:
                                url: ${workerUrl + "/update-job-status"}
                                body:
                                  jobId: ${jobId}
                                  status: "failed"
                                  error: '${"Enricher failed: " + e.message}'
                              auth:
                                type: OIDC
                          - raiseError2:
                              raise: ${e}

                  # Ranker Phase
                  - callRanker:
                      try:
                        call: http.post
                        args:
                          url: ${workerUrl + "/process-ranker"}
                          body:
                            jobId: ${jobId}
                            generation: ${generation}
                            evolutionConfig: ${evolutionConfig}
                            enrichedIdeas: ${enricherResult.body.enrichedIdeas}
                          auth:
                            type: OIDC
                          timeout: 300
                        result: rankerResult
                      except:
                        as: e
                        steps:
                          - logRankerError:
                              call: sys.log
                              args:
                                text: '${"Ranker error for job " + jobId + ", generation " + string(generation) + ": " + json.encode(e)}'
                                severity: "ERROR"
                          - failJob3:
                              call: http.post
                              args:
                                url: ${workerUrl + "/update-job-status"}
                                body:
                                  jobId: ${jobId}
                                  status: "failed"
                                  error: '${"Ranker failed: " + e.message}'
                              auth:
                                type: OIDC
                          - raiseError3:
                              raise: ${e}

                  # Update top performers for next generation
                  - updateTopPerformers:
                      assign:
                        - topPerformers: ${rankerResult.body.topPerformers}

    # Mark job as complete
    - completeJob:
        call: http.post
        args:
          url: ${workerUrl + "/complete-job"}
          body:
            jobId: ${jobId}
          headers:
            Content-Type: "application/json"

    - return:
        return:
          jobId: ${jobId}
          status: "completed"
          totalGenerations: ${totalGenerations}